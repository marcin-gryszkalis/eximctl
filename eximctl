#!/usr/bin/env perl
# https://github.com/marcin-gryszkalis/eximctl

# info:
# http://www.exim.org/exim-html-current/doc/html/spec_html/ch-the_exim_command_line.html
# http://www.exim.org/exim-html-current/doc/html/spec_html/ch-exim_utilities.html
# http://bradthemad.org/tech/notes/exim_cheatsheet.php
# http://www.gnode.net/exim-cheatsheet/

use strict;
use warnings;
use utf8;
use Data::Dumper;
use POSIX qw(strftime);
use FindBin qw($RealBin);

my $REV = "0.11";

my $cfg = {
# defaults:
'eximproc' => 'exim',
'user' => 'mailnull',
'fadeout_time' => 30,  # time for stopping without killing -9
'logdir' => '/var/log/exim',
'mainlog' => 'exim-main-%Y%m%d.log',
'exitop' => '~/git/exitop/exitop'
};

my @conffiles = qw#/etc/eximctl.conf /usr/local/etc/eximctl.conf $RealBin/eximctl.conf#;
for my $cf (@conffiles)
{
    next unless -f $cf;
    open(my $cff, $cf) or die "cannot read config ($cf): $!";
    while (<$cff>)
    {
        next unless /^\s*(\S+?)\s*=\s*(.*?)\s*$/;
        $cfg->{$1} = $2;
    }
}

# tested on FreeBSD and Linux
my $psexim_cmd = "ps -o pid,state,comm,user -U $cfg->{user}";
sub psexim
{
#  PID STAT COMMAND     USER
#40177 Ss   exim-4.82-0 mailnull
#62968 Is   exim-4.82-0 mailnull
    open(my $p, "-|", $psexim_cmd) or die "cannot run ps ($psexim_cmd): $!";
    <$p>; # skip hdr
    my @pids;
    while (<$p>)
    {
        chomp;
        s/^\s+//;
        my @e = split/\s+/;
        next unless $e[2] =~ /^$cfg->{eximproc}/;
        push(@pids, $e[0]);
    }
    return \@pids;
}


my $remsgid = '[a-zA-Z0-9]{6}-[a-zA-Z0-9]{6}-[a-zA-Z0-9]{2}';

sub help
{
my $msg = shift;
print "ERROR: $msg\n" if defined $msg;

print <<EOH
eximctl $REV <mg\@fork.pl>
   start                  -- start exim via service
   stop                   -- stop exim via service and SIGTERM + SIGKILL
   restart                -- stop + start
   status                 -- status
   what                   -- full status
   kill                   -- kill all exim process
   alive                  -- check if exim is alive (report via exitcode)
   pids                   -- list pids of exim processes
   top                    -- exitop (using exim main log)

   config                 -- show config
   syntax                 -- test configuration syntax
   reload                 -- reload config with SIGHUP
   version                -- show exim version

   mailq                  -- show the queue
   mailqq                 -- show the queue (brief format)
   queue                  -- show the queue, mailq alias
   qsize                  -- show queue size
   qstats                 -- queue statistics
   qgrep <msg spec>       -- grep queue (brief format)

   flush <msg spec>       -- flush queue
   flushall               -- flush all (including frozen, exim -qff mode)

   log <msg spec>         -- show log for message
   head <msg spec>        -- show message header
   body <msg spec>        -- show message body
   contents <msg spec>    -- show complete contents (header+body) of message

   delete <msg spec>      -- delete message from queue (no error sent)
   fail <msg spec>        -- fail message (bounce)
   freeze <msg spec>      -- freeze message
   thaw <msg spec>        -- thaw (unfreeze) message

   routing email          -- view routing for email

    <msg spec> -- specification for message:
     - msg id - message id, formatted as xxxxxx-xxxxxx-xx
     - [from|to] regexp - regexp to be matched against sender (from, the default) or recipient (to)
     - use explicit regexp to match all messages (eg. single dot would match any message)

EOH
;
    exit;
}

my $details;
sub queue_by_message_spec
{
    my $spec = shift @ARGV;
    my $subj = 'from';
    my @ret;

    help("undefined argument") unless defined $spec;

    if ($spec =~ /^$remsgid/) # msg id
    {
        push(@ret, $spec);
    }
    else
    {
        if ($spec =~ m/^(from|to)$/i)
        {
            $subj = $1;
            $spec = shift @ARGV;
        }

        my $exqopt = '-b';

        if ($subj eq 'from') 
        {
            $exqopt = "-b -f '$spec'" 
        }
        else # to
        {
            $exqopt = "-b -r '$spec'" 
        }
        
        open(my $m, "-|", "exiqgrep $exqopt") or die "cannot run exiqgrep (exiqgrep $exqopt): $!";
        while (<$m>)
        {
            chomp;
            if (/^($remsgid)\s+From:\s+(<(\S*)>)\s+To:\s+(\S*)/)
            {
                my $mid = $1;
                my $mfrom = $3;
                my $mto = $4;

                push(@ret, $mid);
                $details->{$mid} = "$mid <$mfrom> -> <$mto>";
            }
            
        }

    }

    return \@ret;
}

sub process_queue_with_option 
{
    my $opt = shift;
    my $q = queue_by_message_spec();
    for my $mid (@$q)
    {
        print $details->{$mid} // $mid, "\n";
        print `exim $opt '$mid'` if defined $opt;
    }
}

# return number of exim processes
sub is_alive
{
    my @pids = @{psexim()};
    return scalar @pids;
}

sub x_pids
{
    print join("\n", @{psexim()})."\n";
}

sub is_in_path
{
    my $bin = shift;
    for my $p (split(/:/, $ENV{PATH}))
    {
        return 1 if -x "$p/$bin";
    }
    
    return 0;
}

sub x_start
{
    print `service exim start`;
}

sub x_stop
{
    print `service exim stop`;
    my $p = is_alive();
    my $t = 0;
    while ($p > 0 && $t < $cfg->{fadeout_time})
    {
        sleep(1);
        print "$p...";
        $t++;
        $p = is_alive();
    }

    if ($p)
    {
        print "\n";
        x_kill();
    }
    else
    {
        print "stopped\n";
    }
}

sub x_restart
{
    x_stop();
    x_start();
}

sub x_status
{
    print `service exim status`;
}

sub x_what
{
    print `exiwhat`;
}

sub x_alive
{
    exit(is_alive() ? 0 : 1);
}

sub x_kill
{    
    my $t = 0;
    my $p = is_alive();
    print "terminating exim processes...";
    while ($p > 0 && $t < $cfg->{fadeout_time})
    {
        sleep(1);
        print "$p...";
        kill('SIGTERM', @{psexim()});
        $t++;
        $p = is_alive();
    }
    
    if ($p)
    {
        print "\nkilling remaining exim processes...";
        kill('SIGKILL', @{psexim()});
        sleep(3);
        if (is_alive())
        {
            print "they're still alive\n";
        }   
        else
        {
            print "killed\n";
        }
    }
    else
    {
        print "terminated\n";
    }
}

sub x_top
{
    my $exitop_bin = is_in_path('exitop') ? 'exitop' : $cfg->{exitop};

    my $mainlog =  strftime("$cfg->{logdir}/$cfg->{mainlog}", localtime(time));
    die "cannot find main exim log ($mainlog)" unless -f $mainlog;

    exec "$exitop_bin $mainlog";
}

sub x_config
{
    print `exim -bP`;
}
 
sub x_syntax
{
    my $a = `exim -bV`;
    $a =~ m{(.*)Exim version};
    $a = $1;
    $a =~ s/\s+//g;
    $a = "Syntax OK" if $a eq '';
    print "$a\n";
}

sub x_reload
{
    kill('SIGHUP', @{psexim()});
    print "reloaded...\n";
}

sub x_version
{
    print `exim -bV`;
}
 
sub x_mailq
{
    print `exim -bp`;
}
 
sub x_mailqq
{
    my $arg = shift @ARGV;
    unshift(@ARGV, $arg // '.');
    process_queue_with_option();
}

sub x_queue
{
    return x_mailq();
}

sub x_qsize
{
    print `exim -bpc`;
}

sub x_qstats
{
    print `exim -bp | exiqsumm`;
}

sub x_qgrep
{
    process_queue_with_option();
}

sub x_flush
{
    process_queue_with_option('-M');
}
 
sub x_flushall
{
    print `exim -qff`;
}  

sub x_log
{
    process_queue_with_option('-Mvl');
}  
 
sub x_head
{
    process_queue_with_option('-Mvh');
}  
 
sub x_body
{
    process_queue_with_option('-Mvb');
}  

sub x_contents
{
    process_queue_with_option('-Mvc');
}  


sub x_delete
{
    process_queue_with_option('-Mrm');
}  
 
sub x_fail
{
    process_queue_with_option('-Mg');
}  
 
sub x_freeze
{
    process_queue_with_option('-Mf');
}  
 
sub x_thaw
{
    process_queue_with_option('-Mt');
}  
 
sub x_routing
{
    my $m = shift @ARGV;
    help("recipient for routing test unspecified") unless $m;
    print `exim -bt '$m'`;
}  


help() if $#ARGV < 0;
my $command = shift;
my $xcmd = "x_$command";

help("unknown function ($command)") unless exists &$xcmd;

no strict 'refs';
&$xcmd;

